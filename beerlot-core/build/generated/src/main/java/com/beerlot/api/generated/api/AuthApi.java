/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

import com.beerlot.api.generated.model.AccessTokenResponse;
import com.beerlot.api.generated.model.MemberCreateRequest;
import com.beerlot.api.generated.model.ProviderType;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "Auth", description = "auth management")
    public interface AuthApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * GET /auth/authorization/{provider} : Social Login
            *
                * @param provider OAuth Provider Type (required)
                * @param beerlotOauthRedirectUrl redirect url to frontend (required)
            * @return Successfully redirected. (status code 302)
                *         or Invalid redirect url. (status code 400)
                *         or Unauthorized. (status code 401)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "login",
                    summary = "Social Login",
                    tags = { "auth" },
                responses = {
                    @ApiResponse(responseCode = "302", description = "Successfully redirected."),
                    @ApiResponse(responseCode = "400", description = "Invalid redirect url."),
                    @ApiResponse(responseCode = "401", description = "Unauthorized."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/auth/authorization/{provider}"
            )
        default ResponseEntity<Void> login(
        @Parameter(name = "provider", description = "OAuth Provider Type", required = true) @PathVariable("provider") ProviderType provider,
        @Parameter(name = "beerlot-oauth-redirect-url", description = "redirect url to frontend", required = true) @RequestParam(value = "beerlot-oauth-redirect-url", required = true) String beerlotOauthRedirectUrl
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * PATCH /auth/refresh : Update refresh token
            *
            * @return Created. (status code 200)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "refreshToken",
                    summary = "Update refresh token",
                    tags = { "auth" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "Created.", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = AccessTokenResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/auth/refresh",
            produces = { "application/json" }
            )
        default ResponseEntity<AccessTokenResponse> refreshToken(
        
        HttpServletRequest httpServletRequest, 
        HttpServletResponse httpServletResponse, 
        @RequestHeader("Authorization") String bearerToken
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * PATCH /auth/signup : Signup User
            *
                * @param memberCreateRequest User Signup Form (required)
            * @return Created. (status code 201)
                *         or Conflict. Already exists. (status code 409)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "signUp",
                    summary = "Signup User",
                    tags = { "auth" },
                responses = {
                    @ApiResponse(responseCode = "201", description = "Created."),
                    @ApiResponse(responseCode = "409", description = "Conflict. Already exists."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                },
                security = {
                    @SecurityRequirement(name = "BearerAuth")
                }
                )
            @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/auth/signup",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> signUp(
        @Parameter(name = "MemberCreateRequest", description = "User Signup Form", required = true) @RequestBody MemberCreateRequest memberCreateRequest
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }

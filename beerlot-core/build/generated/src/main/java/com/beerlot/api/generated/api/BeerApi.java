/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

import com.beerlot.api.generated.model.BeerPage;
import com.beerlot.api.generated.model.BeerResponse;
import com.beerlot.api.generated.model.BeerSortType;
import com.beerlot.api.generated.model.LanguageCode;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "Beer", description = "beer management")
    public interface BeerApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * GET /{languageCode}/beers/{beerId} : Get one beer
            *
                * @param languageCode Language Code (required)
                * @param beerId beer id (required)
            * @return OK (status code 200)
                *         or Not found. The beer with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findBeerById",
                    summary = "Get one beer",
                    tags = { "beer" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BeerResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not found. The beer with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/{languageCode}/beers/{beerId}",
            produces = { "application/json" }
            )
        default ResponseEntity<BeerResponse> findBeerById(
        @Parameter(name = "languageCode", description = "Language Code", required = true) @PathVariable("languageCode") LanguageCode languageCode,
        @Parameter(name = "beerId", description = "beer id", required = true) @PathVariable("beerId") Long beerId
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$ref\" : \"#/components/examples/BeerResponse_Example\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /{languageCode}/beers : Get all beers with full search
            *
                * @param languageCode Language Code (required)
                * @param page page number (required)
                * @param size size of one page (required)
                * @param sort type of sort (required)
                * @param keyword Search keyword (optional)
                * @param categories Category IDs (optional)
                * @param countries Countries (optional)
                * @param volumes Beer Alcohol Volume (optional)
            * @return OK (status code 200)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findBeersBySearch",
                    summary = "Get all beers with full search",
                    tags = { "beer" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BeerPage.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/{languageCode}/beers",
            produces = { "application/json" }
            )
        default ResponseEntity<BeerPage> findBeersBySearch(
        @Parameter(name = "languageCode", description = "Language Code", required = true) @PathVariable("languageCode") LanguageCode languageCode,
        @Parameter(name = "page", description = "page number", required = true) @RequestParam(value = "page", required = true) Integer page,
        @Parameter(name = "size", description = "size of one page", required = true) @RequestParam(value = "size", required = true) Integer size,
        @Parameter(name = "sort", description = "type of sort", required = true) @RequestParam(value = "sort", required = true) BeerSortType sort,
        @Parameter(name = "keyword", description = "Search keyword") @RequestParam(value = "keyword", required = false) String keyword,
        @Parameter(name = "categories", description = "Category IDs") @RequestParam(value = "categories", required = false) List<Long> categories,
        @Parameter(name = "countries", description = "Countries") @RequestParam(value = "countries", required = false) List<String> countries,
        @Parameter(name = "volumes", description = "Beer Alcohol Volume") @RequestParam(value = "volumes", required = false) List<Integer> volumes
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contents\" : [ { \"$ref\" : \"#/components/examples/BeerResponse_Example\" }, { \"$ref\" : \"#/components/examples/BeerResponse_Example\" } ], \"page_request\" : { } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /{languageCode}/beers/top : Get Top 10 beers
            *
                * @param languageCode Language Code (required)
            * @return OK (status code 200)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findTop10Beers",
                    summary = "Get Top 10 beers",
                    tags = { "beer" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BeerResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/{languageCode}/beers/top",
            produces = { "application/json" }
            )
        default ResponseEntity<List<BeerResponse>> findTop10Beers(
        @Parameter(name = "languageCode", description = "Language Code", required = true) @PathVariable("languageCode") LanguageCode languageCode
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$ref\" : \"#/components/examples/BeerResponse_Example\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }

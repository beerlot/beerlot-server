/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "BeerLike", description = "beer like management")
    public interface BeerLikeApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * POST /beers/{beerId}/likes : Like the beer with specified id
            *
                * @param beerId beer id (required)
            * @return Like created. (status code 201)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Not Found. Does not exist. (status code 404)
                *         or Conflict. Already exists. (status code 409)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "createBeerLike",
                    summary = "Like the beer with specified id",
                    tags = { "beer like" },
                responses = {
                    @ApiResponse(responseCode = "201", description = "Like created."),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "404", description = "Not Found. Does not exist."),
                    @ApiResponse(responseCode = "409", description = "Conflict. Already exists."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/beers/{beerId}/likes"
            )
        default ResponseEntity<Void> createBeerLike(
        @Parameter(name = "beerId", description = "beer id", required = true) @PathVariable("beerId") Long beerId
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * DELETE /beers/{beerId}/likes : UnLike the beer with specified id
            *
                * @param beerId beer id (required)
            * @return Unlike succeeded. (status code 204)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Not Found. Does not exist. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "deleteBeerLike",
                    summary = "UnLike the beer with specified id",
                    tags = { "beer like" },
                responses = {
                    @ApiResponse(responseCode = "204", description = "Unlike succeeded."),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "404", description = "Not Found. Does not exist."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/beers/{beerId}/likes"
            )
        default ResponseEntity<Void> deleteBeerLike(
        @Parameter(name = "beerId", description = "beer id", required = true) @PathVariable("beerId") Long beerId
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }

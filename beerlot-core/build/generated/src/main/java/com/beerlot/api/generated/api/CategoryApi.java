/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

import com.beerlot.api.generated.model.CategorySupResponse;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "Category", description = "category management")
    public interface CategoryApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * GET /categories : Get all categories
            *
            * @return OK (status code 200)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "getCategories",
                    summary = "Get all categories",
                    tags = { "category" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = CategorySupResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/categories",
            produces = { "application/json" }
            )
        default ResponseEntity<List<CategorySupResponse>> getCategories(
        
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 1, \"name\" : \"에일\", \"description\" : \"This is Ale.\", \"children\" : [ { \"id\" : 10, \"name\" : \"아메리칸 블론드 에일\", \"description\" : \"This is American Blonde Ale.\" } ] }, { \"id\" : 2, \"name\" : \"IPA\", \"children\" : [ { \"id\" : 17, \"name\" : \"잉글리쉬 IPA\", \"description\" : \"This is English IPA.\" }, { \"id\" : 21, \"name\" : \"아메리칸 IPA\", \"description\" : \"This is American IPA.\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /categories/{categoryId} : Get one category found by category id
            *
                * @param categoryId category id (required)
            * @return OK (status code 200)
                *         or Not found. The category with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "getCategory",
                    summary = "Get one category found by category id",
                    tags = { "category" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = CategorySupResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not found. The category with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/categories/{categoryId}",
            produces = { "application/json" }
            )
        default ResponseEntity<CategorySupResponse> getCategory(
        @Parameter(name = "categoryId", description = "category id", required = true) @PathVariable("categoryId") Long categoryId
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }

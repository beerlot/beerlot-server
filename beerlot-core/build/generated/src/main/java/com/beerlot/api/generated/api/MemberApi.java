/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

import com.beerlot.api.generated.model.MemberResponse;
import com.beerlot.api.generated.model.MemberUpdateRequest;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "Member", description = "member management")
    public interface MemberApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * GET /members : Check if given username already exists
            *
                * @param username username (required)
            * @return Ok to use the username. (status code 200)
                *         or Conflict. The username already exists. (status code 409)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "checkUsernameDuplicated",
                    summary = "Check if given username already exists",
                    tags = { "member" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "Ok to use the username."),
                    @ApiResponse(responseCode = "409", description = "Conflict. The username already exists."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/members"
            )
        default ResponseEntity<Void> checkUsernameDuplicated(
        @Parameter(name = "username", description = "username", required = true) @RequestParam(value = "username", required = true) String username
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /members/me : Get Member Profile
            *
            * @return OK (status code 200)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "getMember",
                    summary = "Get Member Profile",
                    tags = { "member" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = MemberResponse.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/members/me",
            produces = { "application/json" }
            )
        default ResponseEntity<MemberResponse> getMember(
        
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_message\" : \"status_message\", \"image_url\" : \"image_url\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * PATCH /members : Update Member Profile
            *
                * @param memberUpdateRequest Member Profile Update Form (required)
            * @return OK (status code 200)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "updateMember",
                    summary = "Update Member Profile",
                    tags = { "member" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = MemberResponse.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/members",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<MemberResponse> updateMember(
        @Parameter(name = "MemberUpdateRequest", description = "Member Profile Update Form", required = true) @RequestBody MemberUpdateRequest memberUpdateRequest
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status_message\" : \"status_message\", \"image_url\" : \"image_url\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }

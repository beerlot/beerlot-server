/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

import com.beerlot.api.generated.model.ReviewCreateRequest;
import com.beerlot.api.generated.model.ReviewPage;
import com.beerlot.api.generated.model.ReviewResponse;
import com.beerlot.api.generated.model.ReviewSortType;
import com.beerlot.api.generated.model.ReviewUpdateRequest;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "Review", description = "beer review management")
    public interface ReviewApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * POST /beers/{beerId}/reviews : Create a new review
            *
                * @param beerId beer id (required)
                * @param reviewCreateRequest  (required)
            * @return Review created. (status code 201)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Not found. The beer with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "createReview",
                    summary = "Create a new review",
                    tags = { "review" },
                responses = {
                    @ApiResponse(responseCode = "201", description = "Review created."),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "404", description = "Not found. The beer with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/beers/{beerId}/reviews",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> createReview(
        @Parameter(name = "beerId", description = "beer id", required = true) @PathVariable("beerId") Long beerId,
        @Parameter(name = "ReviewCreateRequest", description = "", required = true) @RequestBody ReviewCreateRequest reviewCreateRequest
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * DELETE /reviews/{reviewId} : Delete the review
            *
                * @param reviewId beer review id (required)
            * @return Review deleted. (status code 204)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Forbidden. Inproper authorization. (status code 403)
                *         or Not found. The review with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "deleteReview",
                    summary = "Delete the review",
                    tags = { "review" },
                responses = {
                    @ApiResponse(responseCode = "204", description = "Review deleted."),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "403", description = "Forbidden. Inproper authorization."),
                    @ApiResponse(responseCode = "404", description = "Not found. The review with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/reviews/{reviewId}"
            )
        default ResponseEntity<Void> deleteReview(
        @Parameter(name = "reviewId", description = "beer review id", required = true) @PathVariable("reviewId") Long reviewId
        
        
        
            ) {
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /reviews : Get all reviews
            *
                * @param page page number (required)
                * @param size size of one page (required)
                * @param sort type of sort (required)
            * @return Ok. (status code 200)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findAllReviews",
                    summary = "Get all reviews",
                    tags = { "review" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "Ok.", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewPage.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/reviews",
            produces = { "application/json" }
            )
        default ResponseEntity<ReviewPage> findAllReviews(
        @Parameter(name = "page", description = "page number", required = true) @RequestParam(value = "page", required = true) Integer page,
        @Parameter(name = "size", description = "size of one page", required = true) @RequestParam(value = "size", required = true) Integer size,
        @Parameter(name = "sort", description = "type of sort", required = true) @RequestParam(value = "sort", required = true) ReviewSortType sort
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contents\" : [ { \"like_count\" : 6, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"rate\" : 0.8008282, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"beer_id\" : 1, \"content\" : \"content\" }, { \"like_count\" : 6, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"rate\" : 0.8008282, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"beer_id\" : 1, \"content\" : \"content\" } ], \"page_request\" : { } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /reviews/{reviewId} : Get one review with specified ID
            *
                * @param reviewId beer review id (required)
            * @return Ok. Get review. (status code 200)
                *         or Not found. The review with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findReviewById",
                    summary = "Get one review with specified ID",
                    tags = { "review" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "Ok. Get review.", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not found. The review with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/reviews/{reviewId}",
            produces = { "application/json" }
            )
        default ResponseEntity<ReviewResponse> findReviewById(
        @Parameter(name = "reviewId", description = "beer review id", required = true) @PathVariable("reviewId") Long reviewId
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"like_count\" : 6, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"rate\" : 0.8008282, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"beer_id\" : 1, \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * GET /beers/{beerId}/reviews : Get all reviews specified by beer ID
            *
                * @param beerId beer id (required)
                * @param page page number (required)
                * @param size size of one page (required)
                * @param sort type of sort (required)
            * @return Ok. (status code 200)
                *         or Not found. The beer with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findReviewsByBeerId",
                    summary = "Get all reviews specified by beer ID",
                    tags = { "review" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "Ok.", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewPage.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not found. The beer with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/beers/{beerId}/reviews",
            produces = { "application/json" }
            )
        default ResponseEntity<ReviewPage> findReviewsByBeerId(
        @Parameter(name = "beerId", description = "beer id", required = true) @PathVariable("beerId") Long beerId,
        @Parameter(name = "page", description = "page number", required = true) @RequestParam(value = "page", required = true) Integer page,
        @Parameter(name = "size", description = "size of one page", required = true) @RequestParam(value = "size", required = true) Integer size,
        @Parameter(name = "sort", description = "type of sort", required = true) @RequestParam(value = "sort", required = true) ReviewSortType sort
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"contents\" : [ { \"like_count\" : 6, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"rate\" : 0.8008282, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"beer_id\" : 1, \"content\" : \"content\" }, { \"like_count\" : 6, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"rate\" : 0.8008282, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"beer_id\" : 1, \"content\" : \"content\" } ], \"page_request\" : { } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }


            /**
            * PATCH /reviews/{reviewId} : Update the review
            *
                * @param reviewId beer review id (required)
                * @param reviewUpdateRequest  (required)
            * @return Ok. Review updated. (status code 200)
                *         or Unauthorized. Access token is missing or invalid. (status code 401)
                *         or Forbidden. Inproper authorization. (status code 403)
                *         or Not found. The review with specified ID was not found. (status code 404)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "updateReview",
                    summary = "Update the review",
                    tags = { "review" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "Ok. Review updated.", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ReviewResponse.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized. Access token is missing or invalid."),
                    @ApiResponse(responseCode = "403", description = "Forbidden. Inproper authorization."),
                    @ApiResponse(responseCode = "404", description = "Not found. The review with specified ID was not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/reviews/{reviewId}",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<ReviewResponse> updateReview(
        @Parameter(name = "reviewId", description = "beer review id", required = true) @PathVariable("reviewId") Long reviewId,
        @Parameter(name = "ReviewUpdateRequest", description = "", required = true) @RequestBody ReviewUpdateRequest reviewUpdateRequest
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"like_count\" : 6, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"rate\" : 0.8008282, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"beer_id\" : 1, \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }

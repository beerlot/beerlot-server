/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.beerlot.api.generated.api;

import com.beerlot.api.generated.model.TagResponse;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
        import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
    import java.util.Optional;
    import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.RequestHeader;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
    @Tag(name = "Tag", description = "tag management")
    public interface TagApi {

                default Optional<NativeWebRequest> getRequest() {
                    return Optional.empty();
                    }

            /**
            * GET /tags/{tagId} : Get one beer tag
            *
                * @param tagId tag id (required)
            * @return OK (status code 200)
                *         or Internal server error. Unexpected error. (status code 500)
            */
                @Operation(
                operationId = "findTagById",
                    summary = "Get one beer tag",
                    tags = { "tag" },
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = TagResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error. Unexpected error.")
                }
                )
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/tags/{tagId}",
            produces = { "application/json" }
            )
        default ResponseEntity<TagResponse> findTagById(
        @Parameter(name = "tagId", description = "tag id", required = true) @PathVariable("tagId") Long tagId
        
        
        
            ) {
            getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"beers\" : [ { \"$ref\" : \"#/components/examples/BeerResponse_Example\" }, { \"$ref\" : \"#/components/examples/BeerResponse_Example\" } ], \"description\" : \"description\", \"name_ko\" : \"name_ko\", \"name_en\" : \"name_en\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

            }

        }
